using System.Collections.Generic;

namespace FastColoredTextBoxNS.Render
{
    public class ScriptCommunityPack
    {
        public static string[] _keywords = new string[]
        {
        "uid", "src", "tag", "tag0", "ctag", "ctag0", "var", "var0", "local", "float", "ref", "def",
        "def0", "act", "targ", "serv", "new", "cont", "list", "obj", "topobj", "account", "region",
        "sector", "link", "findlayer", "findcont", "findid", "findtype", "file", "db",
        "On=@AfterClick\n","On=@Attack\n","On=@CallGuards\n","On=@CharAttack\n","On=@CharClick\n","On=@CharClientTooltip\n",
        "On=@CharDClick\n","On=@CharTradeAccepted\n","On=@Click\n","On=@ClientTooltip\n","On=@ContextMenuRequest\n","On=@ContextMenuSelect\n",
        "On=@Create\n","On=@Criminal\n","On=@DClick\n","On=@Death\n","On=@DeathCorpse\n","On=@Destroy\n","On=@Dismount\n","On=@EnvironChange\n",
        "On=@ExpChange\n","On=@ExpLevelChange\n","On=@FameChange\n","On=@GetHit\n","On=@Hit\n","On=@HitMiss\n","On=@HouseDesignCommit\n",
        "On=@HouseDesignExit\n","On=@Hunger\n","On=@ItemAfterClick\n","On=@ItemBuy\n","On=@ItemClick\n","On=@ItemClientTooltip\n",
        "On=@ItemContextMenuRequest\n","On=@ItemContextMenuSelect\n","On=@ItemCreate\n","On=@ItemDamage\n","On=@ItemDClick\n",
        "On=@ItemDropOn_Char\n","On=@ItemDropOn_Ground\n","On=@ItemDropOn_Item\n","On=@ItemDropOn_Self\n","On=@ItemEquip\n",
        "On=@ItemEquipTest\n","On=@ItemPickUp_Ground\n","On=@ItemPickUp_Pack\n","On=@ItemPickUp_Self\n","On=@ItemPickUp_Stack\n",
        "On=@ItemSell\n","On=@ItemSpellEffect\n","On=@ItemStep\n","On=@ItemTargOn_Cancel\n","On=@ItemTargOn_Char\n","On=@ItemTargOn_Ground\n",
        "On=@ItemTargOn_Item\n","On=@ItemToolTip\n","On=@ItemUnEquip\n","On=@Jailed\n","On=@KarmaChange\n","On=@Kill\n","On=@Login\n","On=@Logout\n",
        "On=@Mount\n","On=@MurderDecay\n","On=@MurderMark\n","On=@NPCAcceptItem\n","On=@NPCActFight\n","On=@NPCActFollow\n","On=@NPCAction\n",
        "On=@NPCHearGreeting\n","On=@NPCHearUnknown\n","On=@NPCLookAtChar\n","On=@NPCLookAtItem\n","On=@NPCLostTeleport\n","On=@NPCRefuseItem\n",
        "On=@NPCRestock\n","On=@NPCSeeNewPlayer\n","On=@NPCSeeWantItem\n","On=@NPCSpecialAction\n","On=@PersonalSpace\n","On=@PetDesert\n",
        "On=@Profile\n","On=@ReceiveItem\n","On=@RegionEnter\n","On=@RegionLeave\n","On=@Rename\n","On=@SeeCrime\n","On=@SkillAbort\n",
        "On=@SkillChange\n","On=@SkillFail\n","On=@SkillGain\n","On=@SkillMakeItem\n","On=@SkillMenu\n","On=@SkillPreStart\n","On=@SkillSelect\n",
        "On=@SkillStart\n","On=@SkillSuccess\n","On=@SkillUseQuick\n","On=@SpellBook\n","On=@SpellCast\n","On=@SpellEffect\n","On=@SpellFail\n",
        "On=@SpellSelect\n","On=@SpellSuccess\n","On=@StatChange\n","On=@StepStealth\n","On=@ToolTip\n","On=@TradeAccepted\n","On=@UserBugReport\n",
        "On=@UserChatButton\n","On=@UserExtCmd\n","On=@UserExWalkLimit\n","On=@UserGuildButton\n","On=@UserKRToolbar\n","On=@UserMailBag\n",
        "On=@UserQuestArrowClick\n","On=@UserQuestButton\n","On=@UserSkills\n","On=@UserSpecialMove\n","On=@UserStats\n","On=@UserVirtue\n",
        "On=@UserVirtueInvoke\n","On=@UserWarmode\n","On=@Buy\n","On=@Damage\n","On=@DropOn_Char\n","On=@DropOn_Ground\n","On=@DropOn_Item\n",
        "On=@DropOn_Self\n","On=@Equip\n","On=@EquipTest\n","On=@PickUp_Ground\n","On=@PickUp_Pack\n","On=@PickUp_Self\n","On=@PickUp_Stack\n",
        "On=@Sell\n","On=@Step\n","On=@TargOn_Cancel\n","On=@TargOn_Char\n","On=@TargOn_Ground\n","On=@TargOn_Item\n","On=@Timer\n","On=@UnEquip\n",
        "On=@ResourceTest\n","On=@ResourceFound\n","On=@CliPeriodic\n","On=@Enter\n","On=@Exit\n","On=@RegPeriodic\n","On=@Abort\n","On=@Fail\n",
        "On=@Gain\n","On=@PreStart\n","On=@Select\n","On=@Start\n","On=@Success\n","On=@UseQuick\n","On=@Effect\n"};

        public static string[] declarationSnippets = new string[]
        {
        "[AREADEF a_^]","[CHARDEF c_^]","[ROOMDEF a_^]","[SKILL ^]","[SKILLCLASS ^]",
        "[DIALOG d_^]","[EVENTS e_^]","[ITEMDEF i_^]","[MENU m_^]","[REGIONTYPE r_^]",
        "[SKILLMENU sm_^]","[SPAWN ^]","[SPELL ^]","[TYPEDEF t_^]","[FUNCTION f_^]","[EOF]^"
        };

        public static List<Keyword> keywordsInfo = new List<Keyword>();

        public static string[] methods = new string[]
        {
        "act", "attr", "body", "dex", "findcont", "findid", "findlayer", "findtype",
        "id", "int", "ischar", "iscont", "isevent", "isgm", "isitem", "isneartype",
        "istevent", "mana", "maxhits ", "maxmana", "maxstam", "maxweight ", "memoryfindtype",
        "memoryfind", "message", "messageua", "modar", "moddex", "modint",  "modmaxweight",
        "modstr", "obody", "odex", "oint", "oskin", "ostr", "owner", "p", "region", "room",
        "sector", "stam", "str", "home","hits", "memoryfindtype"
         };

        public static string[] snippets = new string[]
        {
        "if (<^>)\n\nendif", "if (<^>)\n\nelseif (<>)\n\nelse\n\nendif", "for ^\n\nendfor",
        "forcharlayer ^\n\nendfor", "forcharmemorytype ^\n\nendfor", "forchars ^\n\nendfor",
        "forclients ^\n\nendfor", "forplayers ^\n\nendfor", "forcont ^\n\nendfor", "forcontid ^\n\nendfor",
        "forconttype ^\n\nendfor", "forinstances ^\n\nendfor", "foritems ^\n\nendfor", "forobjs ^\n\nendfor",
        "while (<^>)\n\nendwhile", "begin\n^\nend", "dorand ^\n\nenddo", "<eval <^>>", "<floatval <^>>",
        "<qval <^>>", "<uval <^>>", "<fval <^>>", "<feval <^>>", "<fhval <^>>", "<hval <^>>", "strcmp(^)",
        "strcmpi(^)", "strindexof(^)", "strlen(^)", "strmatch(^)", "strregex(^)"
         };

        public static void LOAD()
        {
            #region keywordsInformation
            keywordsInfo.Add(new Keyword("dorigin", "x, , y", "Sets the origin coordinates for dynamically positioned elements.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("nomove", "", "Prevents the dialog from being moved around the screen.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("noclose", "", "Prevents the dialog from being closed when right-clicked.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("nodispose", "", "Prevents the dialog from being closed by the \"Close Dialogs\" macro.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("page", "num", "For multi tab dialogs.", "[ Dialog (Properties) ],[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("checkertrans", "x, , y, , width, , height", "add a transparent layer (only for clients >= 3)", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("resizepic", "x, , y, , backgroundgump, , width, , height", "can come first if multi page. puts up some background gump", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("gumppic", "x, , y, , gump, , hue", "put gumps in the dlg. (hue only for clients >= 3, otherwise ignored)", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("gumppictiled", "x, , y, , width, , height, , gump", "tile a gump", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("tilepic", "x, , y, , item", "put item tiles in the dlg.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("tilepichue", "x, , y, , item, , hue", "put colored item tiles in the dlg.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("text", "x, , y, , color, , stringindex", "put some text here.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("dtext", "x, y, colour, text", "Places some text on to the page. Accepts dynamic coordinates relative to dorigin using -, +, * prefixes.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("croppedtext", "x, y, width, height, colour, text_index", "Places some text on to the page that wraps to specified boundaries.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("dcroppedtext", "x, y, width, height, colour, text", "Places some text on to the page that wraps to specified boundaries. Accepts dynamic coordinates relative to dorigin using -, +, * prefixes.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("htmlgump", "x, , y, , width, , height, , stringindex, , hasbackground, , hasscrollbar", "add an html gump that shows a text", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("dhtmlgump", "x, y, width, height, has_background, has_scrollbar, text", "Places some HTML text on to the page. Accepts dynamic coordinates relative to dorigin using -, +, * prefixes.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("xmfhtmlgump", "x, y, width, height, clilod_id, has_background, has_scrollbar", "Places some localised HTML text on to the page.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("xmfhtmlgumpcolor", "x, y, width, height, cliloc_id, has_background, has_scrollbar, colour", "Places some localised HTML text on to the page with the specified colour.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("xmfhtmltok", "x, y, width, height, has_background, has_scrollbar, colour, cliloc_id, @args@", "Places some localised HTML text on to the page, with arguments to the cliloc (multiple arguments separated by @).", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("button", "x, y, gump_down, gump_up, is_pressable, page, id", "Places a button on to the page", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("buttontileart", "x, y, gump_down, gump_up, is_pressable, page, id, tile_id, tile_hue, tile_x, tile_Y", "Places a button on to the page, with an item image placed over the top as part of the button.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("textentry", "x, y, width, height, colour, id, text_index", "Places a text entry field on to the page where the client can enter text.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("textentrylimited", "x, y, width, height, colour, id, text_index, limit", "Places a text entry field on to the page where the client can enter a limited amount of text.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("dtextentrylimited", "x, y, width, height, colour, id, limit, text", "Places a text entry field on to the page where the client can enter a limited amount of text. Accepts dynamic coordinates relative to dorigin using -, +, * prefixes.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("tooltip", "clilocid", "Popup a tooltip over a gump object (only for clients >= 4)", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("group", "id", "Defines a new group ID, for grouping sets of radio buttons.", "[ Dialog (Properties) ],[ Region (Properties) ],[ Spells ]"));
            keywordsInfo.Add(new Keyword("radio", "x, y, gump_check, gump_uncheck, initial_state, id", "Places a radio button on to the page.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("checkbox", "x, y, gump_check, gump_uncheck, initial_state, id", "Places a checkbox on to the page.", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("anim", "", "Gets or sets a mask of animations that the Mobile supports.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("armor", "", "Gets or sets the character's base defense without armour.", "[ Mobile (Properties) ],[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("aversions", "", "Gets or sets a list of things that the Mobile does not like.", "[ Mobile (Properties) ]"));
            keywordsInfo.Add(new Keyword("baseid", "", "Gets the defname of the Mobile if set, otherwise the ID.", "[ Mobile (Properties) ],[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("bloodcolor", "", "Gets or sets the character's blood colour (a value of -1 prevents the creature from bleeding at all.)", "[ Mobile (Properties) ]"));
            keywordsInfo.Add(new Keyword("can", "", "Gets or sets attributes for the character. See can_flags in sphere_defs.scp.", "[ Mobile (Properties) ],[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("color", "", "Gets or sets the Mobile colour.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dam", "min, max", "Gets or sets the base damage that the Mobile will deal without a weapon.", "[ Mobile (Properties) ],[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("defname", "", "Gets or sets defname of the character.", "[ Mobile (Properties) ],[ Item (Properties) ],[ Region (Resources) (Type) (Properties) ],[ Spawns ],[ Spells ]"));
            keywordsInfo.Add(new Keyword("desires", "", "Gets or sets a list of things that the Mobile likes.", "[ Mobile (Properties) ]"));
            keywordsInfo.Add(new Keyword("dex", "", "Gets or sets the maximum dexterity value allowed for Mobiles with the class.", "[ Skill Classes ],[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dispid", "", "Gets the ID that the Mobile displays as.", "[ Mobile (Properties) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("foodtype", "", "Gets or sets a list of things that the Mobile can eat.", "[ Mobile (Properties) ]"));
            keywordsInfo.Add(new Keyword("height", "", "Gets or sets the height of the character.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("hiredaywage", "", "Gets or sets how much gold is needed to hire the Mobile for one day.", "[ Mobile (Properties) ]"));
            keywordsInfo.Add(new Keyword("icon", "", "Gets or sets the item that can be used to represent the Mobile in figurine form.", "[ Mobile (Properties) ]"));
            keywordsInfo.Add(new Keyword("id", "", "Gets or sets the ID of the Mobile to inherit property values from.", "[ Spawns ],[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("instances", "", "Returns the number of this Mobile that exist in the world.", "[ Mobile (Properties) ],[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("int", "", "Gets or sets the maximum intelligence value allowed for Mobiles with the class.", "[ Skill Classes ],[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("job", "", "Gets the character's job title.", "[ Mobile (Properties) ]"));
            keywordsInfo.Add(new Keyword("maxfood", "", "Gets the maximum food level that the Mobile can have.", "[ Mobile (Properties) ]"));
            keywordsInfo.Add(new Keyword("name", "", " Gets or sets the character's name.", "[ Region (Properties) ],[ Skill Classes ],[ Spells ],[ Accounts (Properties) (Functions) ],[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("range", "min, , max", " Gets the combat range of the character.", "[ Item (Properties) ],[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("rangeh", "", "Gets the maximum attack range of the character.", "[ Mobile (Properties) ],[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("rangel", "", "Gets the minimum attack range of the character.", "[ Mobile (Properties) ],[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("resdispdnhue", "", "Gets or sets the colour to display as to clients who don't have a high enough RESDISP to see the character.", "[ Mobile (Properties) ],[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("resdispnid", "", "Gets or sets the Mobile ID to display as to clients who don't have a high enough RESDISP to see the character.", "[ Mobile (Properties) ],[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("reslevel", "", "Gets or sets the minimum RESDISP required for a client to see the character.", "[ Mobile (Properties) ],[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("resources", "weight, resource_defname", " These are the items that you get whenever you chop up this creature's corpse.", "[ Mobile (Properties) ],[ Item (Properties) ],[ Region (Type) (Properties) ],[ Spawns ],[ Spells ]"));
            keywordsInfo.Add(new Keyword("sound", "sound_id,", " Plays a sound from this character.", "[ Spells ],[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("str", "", " Gets or sets the character's total strength.", "[ Skill Classes ],[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("tag", "", "Gets or sets the value of a TAG.", "[ Region (Properties) ],[ Accounts (Properties) (Functions) ],[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("tevents", "", "", "[ Mobile (Properties) ],[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("tspeech", "speech_defname", "Gets a list of speech handlers for the character, or adds a speech handler to the character.", "[ Mobile (Properties) ],[ Multi (Properties) ]"));
            keywordsInfo.Add(new Keyword("argchk", "", "", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("argchkid", "", "", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("argn1", "", "", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("argtxt", "", "", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("dtextentry", "", "", "[ Dialog (Properties) ]"));
            keywordsInfo.Add(new Keyword("dupeitem", "", "It reiterates the DUPEITEM and sends the server looking to item for more information", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("dupelist", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("dye", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("flip", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isarmor", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isweapon", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("layer", "", "", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("repair", "", "", "[ Item (Properties) ],[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("replicate", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("resmake", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("reqstr", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("skill", "", "", "[ Item (Properties) ],[ Region Resources (Properties) ],[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("skillmake", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("speed", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("tdata1", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("tdata2", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("tdata3", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("tdata4", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("tflags", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("twohands", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("type", "", "If you want to check me on this, look in spheredefs.scp", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("value", "", "", "[ Item (Properties) ]"));
            keywordsInfo.Add(new Keyword("weight", "", "Sets the weight of the last resource added to the region type.", "[ Region Type (Properties) ],[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("basecomponent", "", "", "[ Multi (Properties) ]"));
            keywordsInfo.Add(new Keyword("component", "", "", "[ Multi (Properties) ]"));
            keywordsInfo.Add(new Keyword("multiregion", "", "", "[ Multi (Properties) ]"));
            keywordsInfo.Add(new Keyword("regionflags", "", "", "[ Multi (Properties) ]"));
            keywordsInfo.Add(new Keyword("shipspeed", "", "", "[ Multi (Properties) ]"));
            keywordsInfo.Add(new Keyword("amount", "", "", "[ Region (Resources) (Properties) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("reap", "", "", "[ Region Resources (Properties) ]"));
            keywordsInfo.Add(new Keyword("reapamount", "", "", "[ Region Resources (Properties) ]"));
            keywordsInfo.Add(new Keyword("regen", "", "", "[ Region Resources (Properties) ]"));
            keywordsInfo.Add(new Keyword("calcmemberindex", "", "", "[ Region Type (Properties) ],[ Spawns ]"));
            keywordsInfo.Add(new Keyword("announce", "", "Gets or sets whether or not there will be an announcement when someone enters or exits the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("arena", "", "Gets or sets whether or not the region is considered to be an arena.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("buildable", "", "Gets or sets whether or not players can place buildings and ships in the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("events", "event_defname", "Gets a list of events attached to the object, or adds or removes an event to or from the object.", "[ Region (Properties) ],[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("flags", "", "Gets or sets the region's attributes.", "[ Region (Properties) ],[ Spells ],[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gate", "", "Gets or sets whether or not casting the gate travel spell is allowed in the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("guarded", "", "Gets or sets whether or not guards can be called within the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("magic", "", "Gets or sets whether or not there is an anti-magic field in the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("mark", "", "Gets or sets whether or not casting the mark spell is allowed in the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("nobuild", "", "Gets or sets whether or not players can place buildings in the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("nodecay", "", "Gets or sets whether or not items will decay in the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("nopvp", "", "Gets or sets whether or not PvP combat is allowed in the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("p", "", "Gets or sets the location of the region (used when using the GO command).", "[ Region (Properties) ],[ Mobiles (References) ],[ GM Pages (Properties) (Functions) ],[ Items (References) ]"));
            keywordsInfo.Add(new Keyword("recall", "", "Gets or sets whether or not casting the recall spell is allowed in the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("recallin", "", "Gets or sets whether or not it is possible to use the recall spell to enter the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("recallout", "", "Gets or sets whether players can recall out of the region.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("rect", "left, , top, , right, , bottom, , map", "Adds a rectangle to the region definition.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("safe", "", "Gets or sets whether or not the region is a safe zone.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("underground", "", "Gets or sets whether or not the region is considered to be underground.", "[ Region (Properties) ]"));
            keywordsInfo.Add(new Keyword("skill_key", "", "Gets or sets the maximum amount of skill_key is allowed for Mobiles with the class.", "[ Skill Classes ]"));
            keywordsInfo.Add(new Keyword("skillsum", "", "Gets or sets the maximum skill total allowed for Mobiles with the class.", "[ Skill Classes ]"));
            keywordsInfo.Add(new Keyword("statsum", "", "Gets or sets the maximum stat total allowed for Mobiles with the class. (dexterity, intelligence and strength)", "[ Skill Classes ]"));
            keywordsInfo.Add(new Keyword("makeitem", "item_baseid", "Checks if the client meets the criteria for crafting the item (SKILLREQ and RESOURCES (Properties) on the item's ITEMDEF).", "[ Skill Menu ],[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("skillmenu", "skillmenu_id", "Searches the skillmenu to see what options are available to the client. If there are no visible items in the submenu then the option will be hidden from the client.", "[ Skill Menu ],[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("test", "resource_or_skill_list", "Checks if the client possesses all of the listed resources/skills. If they do not then the menu option will not be available to them.", "[ Skill Menu ]"));
            keywordsInfo.Add(new Keyword("testif", "condition", "Checks the condition. If it evaluates to false then the menu option will not be available to the client.", "[ Skill Menu ]"));
            keywordsInfo.Add(new Keyword("cast_time", "", "Gets or sets the length of time it takes to cast the spell, in tenths of a second. Accepts multiple values to adjust based on skill level.", "[ Spells ]"));
            keywordsInfo.Add(new Keyword("duration", "", "Gets or sets the duration of the spell's affect in tenths of a second, if applicable. Accepts multiple values to adjust based on skill level.", "[ Spells ]"));
            keywordsInfo.Add(new Keyword("effect", "type, item_id, speed, loop, explode, colour, rendermode", "Gets or sets a value which effects skills in different ways. (Crafting = Resource Loss % on Fail, Healing = Amount Healed). Accepts multiple values to adjust based on skill level.", "[ Spells ],[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("effect_id", "", "Gets or sets the ID of the spell's visual effect.", "[ Spells ]"));
            keywordsInfo.Add(new Keyword("interrupt", "", "Gets or sets the chance of a Mobile being interrupted when hit in combat while casting the spell. Accepts multiple values to adjust based on skill level.", "[ Spells ]"));
            keywordsInfo.Add(new Keyword("manause", "", "Gets or sets the number of mana points needed to cast the spell.", "[ Spells ]"));
            keywordsInfo.Add(new Keyword("prompt_msg", "", "Gets or sets the message shown when a Mobile casts the spell, and also forces Mobiles to select a target when non-empty.", "[ Spells ]"));
            keywordsInfo.Add(new Keyword("rune_item", "", "Gets or sets the BASEID of the item that should be equipped when a spell has a duration.", "[ Spells ]"));
            keywordsInfo.Add(new Keyword("runes", "", "Gets or sets the spell's words of power.", "[ Spells ]"));
            keywordsInfo.Add(new Keyword("scroll_item", "", "Gets or sets the BASEID of the scroll that casts the spell.", "[ Spells ]"));
            keywordsInfo.Add(new Keyword("skillreq", "", "Gets or sets a list of skills that are needed to cast the spell.", "[ Spells ]"));
            keywordsInfo.Add(new Keyword("char", "", "Gets the nth Mobile attached to the account. (zero-based)", "[ Accounts (References) ]"));
            keywordsInfo.Add(new Keyword("account", "", "Gets the name of the account.", "[ Accounts (Properties) (Functions) ],[ Mobiles (References) ],[ GM Pages (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("block", "", "Gets or sets whether or the not the account is blocked.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("chars", "", "Gets how many Mobiles are attached to the account.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("chatname", "", "Gets the name the account uses in chat.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("firstconnectdate", "", "Gets the date and time on which the account first connected.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("firstip", "", "Gets the IP address that the account first connected with.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("guest", "", "Gets whether or not the account is a guest account.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("jail", "", "Gets whether or not the account is jailed.", "[ Accounts (Properties) (Functions) ],[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("lang", "", "Gets or sets the account's language.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("lastcharuid", "", "Gets the UID of the last Mobile used on the account.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("lastconnectdate", "", "Gets the date and time on which the account most recently connected.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("lastip", "", "Gets the IP address that the account most recently connected with.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("maxchars", "", "Gets or sets the maximum number of Mobiles that the player can create on the account.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("newpassword", "", "Gets or sets a new password that will be set on the account.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("password", "", "Gets or sets the current password for the account.", "[ Accounts (Properties) (Functions) ],[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("plevel", "", "Gets or sets the account's privelege level.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("priv", "", "Gets or sets account flags.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("resdisp", "", "Gets or sets the account's expansion level.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("tagcount", "", " Gets the number of TAGs stored on the item.", "[ Accounts (Properties) (Functions) ],[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("totalconnecttime", "", "Gets the total number of minutes that the account has been connected for.", "[ Accounts (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("act", "", "Gets or sets the Mobile or item that is related to the action the Mobile is performing.", "[ Mobiles (References) ]"));
            keywordsInfo.Add(new Keyword("findcont", "", "Gets the nth item equipped to the character. (zero-based)", "[ Mobiles (References) ]"));
            keywordsInfo.Add(new Keyword("findid", "", "Gets the first item found equipped to the Mobile or inside their backpack, with the matching BASEID.", "[ Mobiles (References) ]"));
            keywordsInfo.Add(new Keyword("findlayer", "", "Gets the item that the Mobile has equipped in a specified layer.", "[ Mobiles (References) ]"));
            keywordsInfo.Add(new Keyword("findtype", "", "Gets the first item found equipped to the Mobile or inside their backpack, with the matching TYPE.", "[ Mobiles (References) ]"));
            keywordsInfo.Add(new Keyword("memoryfindtype", "", "Gets a memory item with the specified flags.", "[ Mobiles (References) ]"));
            keywordsInfo.Add(new Keyword("memoryfind", "", "Gets a memory item that is linked to the given object.", "[ Mobiles (References) ]"));
            keywordsInfo.Add(new Keyword("owner", "", "Gets the Mobile that owns this character.", "[ Mobiles (References) ]"));
            keywordsInfo.Add(new Keyword("region", "", "", "[ Mobiles (References) ],[ Items (References) ]"));
            keywordsInfo.Add(new Keyword("room", "", "", "[ Mobiles (References) ],[ Items (References) ]"));
            keywordsInfo.Add(new Keyword("sector", "", "", "[ Mobiles (References) ],[ Items (References) ]"));
            keywordsInfo.Add(new Keyword("spawnitem", "", "Gets the spawn item (t_spawn_char) that this Mobile originated from.", "[ Mobiles (References) ]"));
            keywordsInfo.Add(new Keyword("topobj", "", "Gets the top-most Mobile or item in the world that contains the character.", "[ Mobiles (References) ],[ Items (References) ]"));
            keywordsInfo.Add(new Keyword("typedef", "", "Gets the CHARDEF that defines the character.", "[ Mobiles (References) ],[ Items (References) ]"));
            keywordsInfo.Add(new Keyword("weapon", "", "Gets the weapon that the Mobile currently has equipped.", "[ Mobiles (References) ]"));
            keywordsInfo.Add(new Keyword("ac", "", "Returns the character's total defense.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("actarg1", "", "Gets or sets the character's ACTARG1 value.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("actarg2", "", "Gets or sets the character's ACTARG2 value.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("actarg3", "", "Gets or sets the character's ACTARG3 value.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("actdiff", "", "Gets or sets the difficulty of the character's current action.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("action", "", "Gets or sets the skill that the Mobile is currently using.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("actp", "", "Gets or sets the character's ACTP value.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("actprv", "", "Gets or sets the character's ACTPRV value.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("afk", "", "Gets or sets whether or not the Mobile is in AFK mode.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("age", "", "Returns the age of the Mobile since its creation, in seconds.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("allskills", "amount", "Sets all of the character's skills to the specified amount.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("attacker", "", "Gets the number of opponents who have damaged the character.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("bank", "layer", "Opens the character's bank (or the container at the specified layer) for SRC to view.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("bankbalance", "", "Returns the total amount of gold in the character's bankbox.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("bark", "sound_id", "Plays the specified sound (or the character's generic sound if not specified) to nearby clients from this character.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("body", "", "Gets or sets the character's body.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("bounce", "item_uid", "Places a specified item in the character's backpack.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("bow", "", "Makes the Mobile bow to SRC.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("cancast", "spell_id, , check_antimagic", "Returns 1 if the Mobile can cast a given spell, bypassing anti-magic field tests if check_antimagic set to 0.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("canmake", "item_id", "Returns 1 if the Mobile has the skills and resources to craft a certain item.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("canmakeskill", "item_id", "Returns 1 if the Mobile has the skills to craft a certain item.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("canmove", "direction", "Returns 1 if the Mobile can move in the given direction.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("cansee", "", "Returns 1 if SRC can see the character.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("canseelos", "", "Returns 1 if SRC has line of sight to the character.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("canseelosflag", "flag", "Returns 1 if SRC has line of sight to the character, with flags to modify what tests take place.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("consume", "resource_list", "Removes specified resources from SRC's backpack.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("count", "", "Returns the number of items equipped to the character.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("create", "", "Gets or sets the character's age since creation, in seconds.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("criminal", "", "Sets whether or not the Mobile is a criminal.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("damage", "amount, , type, , source", "Inflicts damage upon the character.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dialog", "dialog_id, , page, , parameters", "Displays a dialog to SRC.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dialogclose", "dialog_id, button", "Closes a dialog that SRC has open, simulating a button press.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dialoglist", "<3p>", "<3p>", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dir", "", "Gets or setes the direction that the Mobile is facing.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("disconnect", "", "Disconnects the character.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dismount", "", "Dismounts the Mobile from their ride.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dispiddec", "", "Gets the ID of the Mobile as a decimal number.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("distance", "point_or_uid", "Gets the distance between this object and either SRC, a map location or another object.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dclick", "object_uid", "Double clicks an object, with the Mobile as SRC.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("drawmap", "radius", "Starts the cartography skill, drawing a map of the local area up to radius tiles.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("drop", "item_uid", "Drops a specified item at the character's feet.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dupe", "", "Creates a clone of the character.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("edit", "", "Displays an editing dialog for the Mobile to SRC.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("emote", "message", "Displays a *You see* message to all nearby clients.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("emoteact", "", "Gets, sets or toggles whether or not the Mobile will emote all of its actions.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("equip", "item_uid", "Equips an item to the character.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("equiparmor", "", "Equips the Mobile with the best armour in their backpack.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("equiphalo", "timeout", "Equips a halo light to the character, lasting for timeout tenths of a second.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("equipweapon", "", "Equips the Mobile with the best weapon in their backpack.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("exp", "", "Gets or sets the character's experience points.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("face", "object_uid", "Turns the Mobile to face a specified object or SRC.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("fame", "", "Gets or sets the character's fame.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("fcount", "", "Returns the total number of items equipped to the character, including subitems", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("fix", "", "Re-aligns the character's Z level to ground level.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("fixweight", "", "Recalculates the character's total weight.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("font", "", "Gets or sets the character's speech font.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("food", "", "Gets or sets the character's food level.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("forgive", "", "Revokes the character's jailed status.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("go", "location", "Teleports the Mobile to the specified location.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gochar", "n", "Teleports the Mobile to the nth Mobile in the world.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gocharid", "character_defname", "Teleports the Mobile to the next characer in the world with the specified BASEID", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gocli", "", "eleports the Mobile to the nth online player. (zero-based)", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("goitemid", "item_defname", "Teleports the Mobile to the next item in the world with the specified BASEID.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gold", "", "Gets or sets the amount of gold the Mobile has.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("goname", "name", "Teleports the Mobile to the next Mobile or item in the world with the specified name, accepts wildcards (*).", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gosock", "socket", "Teleports the Mobile to the online player with the specified socket number.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gotype", "item_type", "Teleports the Mobile to the next item in the world with the specified TYPE.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gouid", "object_uid", "Teleports the Mobile to the object with the specified UID.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("guildabbrev", "", "Returns the character's guild abbreviation.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("hear", "text", "For NPCs, acts as if SRC had spoken the specified text. For players, displays text as a system message.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("hits", "", "Gets or sets the character's hitpoints.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("home", "", "Gets or sets the character's home location.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("hungry", "", "Displays this character's hunger level to SRC.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("invis", "", "Sets whether or not the Mobile is invisible.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("invul", "", "Sets whether or not the Mobile is invulnerable.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("ischar", "", "Returns 1 if the object is a character.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("iscont", "", "Returns 1 if the object is a container.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isdialogopen", "dialog_id", "Returns 1 if SRC has the specified dialog visible on their screen.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isevent", "", "Returns 1 if the object has an event attached to it.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isitem", "", "Returns 1 if the object is an item.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isneartype", "type, , distance, , flags", "Returns 1 if a nearby item has the given TYPE.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isneartypetop", "type, , distance, , flags", "Returns a nearby world location of a nearby item which has the given TYPE.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isplayer", "", "Returns 1 if the object is a player.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("istevent", "", "Returns 1 if the object has an event attached to its CHARDEF.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("info", "", "Displays an information dialog about the Mobile to SRC.", "[ Mobiles (Properties) (Functions) ],[ Clients (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isgm", "", "Returns 1 if the Mobile is in GM mode.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isinparty", "", "Returns 1 if the Mobile is in a party.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("ismypet", "", "Returns 1 if the Mobile belongs to SRC.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isonline", "", "Returns 1 if the Mobile is considered to be online.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isstuck", "", "Returns 1 if the Mobile cannot walk in any direction.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isvendor", "", "Returns 1 if the Mobile is a vendor.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isverticalspace", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("karma", "", " Gets or sets the character's karma.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("kill", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("level", "", " Gets or sets the character's experience level.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("light", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("mana", "", " Gets or sets the character's mana.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("map", "", " Gets or sets the map that this object is located.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("maxhits", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("maxmana", "", " Gets or sets the character's maximum mana.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("maxstam", "", " Gets or sets the character's maximum stamina.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("maxweight", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("memory", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("menu", "menu_defname", " Displays a menu to SRC.", "[ Mobiles (Properties) (Functions) ],[ Clients (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("message", "@colornum, message", " Displays a message above this Mobile to SRC.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sysmessage", "@colornum, message", " Displays a message above this Mobile to SRC.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("messageua", "@colornum, message", " Displays a UNICODE message above this Mobile to SRC.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("modar", "", " Gets or sets a modifier for the character's armour rating.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("moddex", "", " Gets or sets the character's dexterity modifier.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("modint", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("modmaxweight", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("modstr", "", " Gets or sets the character's strength modifier.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("mount", "mount_uid", " Attempts to mount the Mobile on to the specified mount.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("move", "", " Moves the object relative to its current position.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("movenear", "object_uid,", " Moves the Mobile to a random location near another object within a certain distance.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("moveto", "location", " Moves the Mobile to a specific location.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("newbieskill", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("newgold", "amount", " Generates amount gold in the character's backpack.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("newloot", "item_or_template_defname", " Generates the specified item or template into the character's backpack, providing that they are an NPC that hasn't been summoned.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("nightsight", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("notogetflag", "viewer_uid,", " Gets the character's notoriety flags as seen by the specified viewer.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("npc", "", " Gets or sets the character's AI type.", "[ Mobiles (Properties) (Functions) ],[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("nudgedown", "amount", " Decreases the character's Z level.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("nudgeup", "amount", " Increases the characer's Z level.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("obody", "", " Gets or sets the character's original body.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("openpaperdoll", "character_uid", " Displays a specified character's paperdoll to this character.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("oskin", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("odex", "", " Gets or sets the character's base dexterity (without modifiers).", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("oint", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("ostr", "", " Gets or sets the character's base strength (without modifiers).", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("pack", "", " Opens the character's backpack for SRC to view.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("poison", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("poly", "character_id", " Begins casting the polymorph spell, with character_id being the Mobile to turn into.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("promptconsole", "function,", " Displays a prompt message to SRC and passes their response into a specified function.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("promptconsoleu", "function,", " Displays a prompt message to SRC and passes their response into a specified function, supporting UNICODE response.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("privset", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("release", "", " Clears the character's owners.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("remove", "allow_player_removal", " Deletes the character.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("removefromview", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("rescold", "", " Gets or sets the character's resistance to cold.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("rescount", "item_defname", " Returns the total amount of a specific item equipped to the Mobile or inside their baackpack.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("resendtooltip", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("resenergy", "", " Gets or sets the character's resistance to energy.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("resfire", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("respoison", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("restest", "item_list", " Returns 1 if all of the items in the list can be found equipped to the Mobile or inside their backpack.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("resurrect", "force", " Resurrects the character. If force is 1 then usual anti-magic checks are bypasses.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("salute", "object_uid", " Makes the Mobile salute a specified object or SRC.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("say", "@colornum, message", " Makes the Mobile speak a message.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sayu", "@colornum, message", " Makes the Mobile speak a UTF-8 message", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sayua", "@colornum, message", " MAkes the Mobile speak a UNICODE message.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sdialog", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("serial", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sex", "value_male:value_female", " Returns value_male or value_female depending on the character's gender.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sextantp", "location", " Converts the character's location or a specified location into sextant coordinates.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("skill_name", "", " Gets or sets the character's skill level in skill_name.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("skillcheck", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("skillbest", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("skillgain", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("skilltest", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("skilltotal", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("skillusequick", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sleep", "fall_forwards", " Makes the Mobile appear to sleep.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("spelleffect", "spell_id,", " Causes the Mobile to be affected by a spell.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("stam", "", " Gets or sets the character's stamina.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("stone", "", " Gets or sets whether or not the Mobile is trapped in stone.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("suicide", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("summoncage", "", " Teleports the Mobile to SRC's, surrounded by a cage multi.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("summonto", "", " Teleports the Mobile to SRC's position.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("tagat", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("taglist", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("targetfgmw", "function", " Displays a targeting cursor to SRC.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("timer", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("timerd", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("timerf", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("title", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("townabbrev", "", " Returns the character's town abbreviation.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("trigger", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("uid", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("underwear", "", " Toggles the display of underwear on the character.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("unequip", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("update", "", " Updates the state of the Mobile to nearby clients.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("updatex", "", " Updates the state of the Mobile to nearby clients, removing it from their view first to ensure a full refresh.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("useitem", "", "", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("visualrange", "", "", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("where", "", " Describes the character's location to SRC.", "[ Mobiles (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("x", "", "Gets the X coordinate of the location.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("y", "", "Gets the Y coordinate of the location.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("z", "", "Gets the Z position of the character.", "[ Mobiles (Properties) (Functions) ],[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("guild", "", "", "[ Players (References) ]"));
            keywordsInfo.Add(new Keyword("skillclass", "", "", "[ Players (References) ]"));
            keywordsInfo.Add(new Keyword("town", "", "", "[ Players (References) ]"));
            keywordsInfo.Add(new Keyword("curfollower", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("deaths", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dspeech", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gmpage", "", "", "[ Players (Properties) (Functions) ],[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("isdspeech", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("kick", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("kills", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("krtoolbarstatus", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("lastused", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("luck", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("maxfollower", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("pflag", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("profile", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("skilllock", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("speedmode", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("statlock", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("tithing", "", "", "[ Players (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("actpri", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("buy", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("bye", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("flee", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("goto", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("hire", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("leave", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("homedist", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("petretrieve", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("petstable", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("restock", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("run", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sell", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("shrink", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("speech", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("speechcolor", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("train", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("vendcap", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("vendgold", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("walk", "", "", "[ NPCs (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gmpagep", "", "", "[ Clients (References) ]"));
            keywordsInfo.Add(new Keyword("housedesign", "", "", "[ Clients (References) ]"));
            keywordsInfo.Add(new Keyword("party", "", "", "[ Clients (References) ]"));
            keywordsInfo.Add(new Keyword("targ", "", "", "[ Clients (References) ]"));
            keywordsInfo.Add(new Keyword("targp", "", "", "[ Clients (References) ]"));
            keywordsInfo.Add(new Keyword("targprop", "", "", "[ Clients (References) ]"));
            keywordsInfo.Add(new Keyword("targprv", "", "", "[ Clients (References) ]"));
            keywordsInfo.Add(new Keyword("add", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("addbuff", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("addcliloc", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("addcontextentry", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("allmove", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("allshow", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("arrowquest", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("badspawn", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("bankself", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("cast", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("charlist", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("clearctags", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("clientis3d", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("clientiskr", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("clientversion", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("ctag", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("ctaglist", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("debug", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("detail", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("everbtarg", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("extract", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("flush", "", "", "[ Clients (Properties) (Functions) ],[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gm", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("gotarg", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("hearall", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("information", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("last", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("lastevent", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("link", "", "", "[ Clients (Properties) (Functions) ],[ Items (References) ]"));
            keywordsInfo.Add(new Keyword("midilist", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("nudge", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("nuke", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("nukechar", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("privshow", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("removebuff", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("reportedcliver", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("reportedcliver.full", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("resend", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("save", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("screensize", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("screensize.x", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("screensize.y", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("scroll", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("self", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sendpacket", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("set", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("showskills", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("skillselect", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("summon", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sysmessage", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sysmessageloc", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sysmessagelocex", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("sysmessageua", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("targtxt", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("tele", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("tile", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("unextract", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("version", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("weblink", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("xcommand", "", "", "[ Clients (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("aexecute", "function, command", "Executes an SQL command in a background thread, calling function when complete. Returns 1 if the command is successfully queued.", "[ Database (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("aquery", "function, command", "Executes an SQL command in a background thread, calling function when complete. Returns 1 if the command is successfully queued.", "[ Database (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("close", "", "Closes the connection to the database.// Closes the currently open file.", "[ Database (Properties) (Functions) ],[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("connect", "", "Opens a connection to the database, using the settings from Sphere.ini.", "[ Database (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("connected", "", "Returns 1 if the database is connected.", "[ Database (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("escapedata", "text", "Returns text as an escaped SQL string.", "[ Database (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("execute", "command", "Exectutes an SQL command that doesn't return any result.", "[ Database (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("query", "command", "Executes an SQL command that returns results.", "[ Database (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("row", "", "", "[ Database (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("row.numcols", "", "Returns the number of columns returned in the last query.", "[ Database (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("row.numrows", "", "Returns the number of rows returned in the last query.", "[ Database (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("deletefile", "file_name", "Deletes file_name.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("fileexist", "file_name", "Returns 1 if file_name exists.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("filelines", "file_name", "Returns the total number of lines in file_name.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("filepath", "", "Returns the name of the currently open file.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("inuse", "", "Returns 1 if a file is currently open.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("iseof", "", "Returns 1 if there are no more lines left to read from the file.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("length", "", "Returns the total length of the currently open file, in bytes.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("mode.append", "", "Gets or sets whether or not the file will be appended to when opened. Cannot be set after the file has been opened.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("mode.create", "", "Gets or sets whether or not the file will be created when opened. Cannot be set after the file has been opened.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("mode.readlflag", "", "Gets or sets whether or not the file will be opened for reading from. Cannot be set after the file has been opened.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("mode.writeflag", "", "Gets or sets whether or not the file will be opened for writing to. Cannot be set after the file has been opened.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("mode.setdefault", "", "Sets the mode to the default setting. Cannot be set after the file has been opened.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("open", "file_name", "Opens a file, and returns 1 if the attempt was successful, using the set MODE flags.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("position", "", "Gets the current position in the currently open file, in bytes.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("readbyte", "", "Reads the next byte from the currently open file.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("readchar", "", "Reads the next Mobile from the currently open file.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("readline", "n", "Reads the nth line from the currently open file (1-based). 0 Reads the last line.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("seek", "position", "Changes the current position in the currently open file to position. Accepts \"BEGIN\" for the start of the file and \"END\" for the end of the file. Returns the new position in the file.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("write", "text", "Writes text to the currently open file.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("writechr", "ascii_value", "Writes a single Mobile to the currently open file.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("writeline", "text", "Writes text to the currently open file, with newline character(s) on the end.", "[ Files (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("handled", "", "Gets the UID of the Mobile currently handling the page.", "[ GM Pages (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("reason", "", "Gets or sets the reason for the page.", "[ GM Pages (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("status", "", "Gets the status of the page sender (OFFLINE, LOGIN or Mobile name).", "[ GM Pages (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("time", "", "Gets the time since the page was originally sent in seconds.", "[ GM Pages (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("cont", "", "Gets or sets the Mobile or container item that the object is inside.", "[ Items (References) ]"));
            keywordsInfo.Add(new Keyword("addcircle", "spell_id", "Gets whether or not a spell exists in the spellbook, or adds a spell to the spellbook.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("addspell", "", "", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("attr", "", "Gets or sets the item's attribute flags.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("cleartags", "prefix", "Removes all TAGs from the item that start with the given prefix.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("contconsume", "resource_list", "Deletes items from inside the container.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("contgrid", "", "If in a container, gets or sets the grid number that the item occupies (in KR's grid view)", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("contp", "", "Gets or sets the position of the item within its container.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("decay", "time", "Sets the decay timer for the item.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dmgcold", "", "Gets or sets the amount of cold damage the weapon will give.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dmgenergy", "", "Gets or sets the amount of energy damage the weapon will give.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dmgfire", "", "Gets or sets the amount of fire damage the weapon will give.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("dmgpoison", "", "Gets or sets the amount of poison damage the weapon will give.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("fruit", "", "", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("hitpoints", "", "", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("more1", "", "Gets or sets the MORE1 value for the item.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("more1h", "", "Gets or sets the upper 4 bytes of the item's MORE1 value.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("more1l", "", "Gets or sets the lower 4 bytes of the item's MORE1 value.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("more2", "", "Gets or sets the MORE2 value for the item.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("more2h", "", "Gets or sets the upper 4 bytes of the item's MORE2 value.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("more2l", "", "Gets or sets the lower 4 bytes of the item's MORE2 value.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("morem", "", "Gets or sets the MOREM value for the item.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("morex", "", "Gets or sets the MOREX value for the item.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("morey", "", "Gets or sets the MOREY value for the item.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("morez", "", "Gets or sets the MOREZ value for the item.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("morep", "", "Gets or sets the MOREP value for the item.", "[ Items (Properties) (Functions) ]"));
            keywordsInfo.Add(new Keyword("use", "", "", "[ Items (Properties) (Functions) ]"));

            #endregion keywordsInformation

            #region TRIGGERS

            ///trigger
            keywordsInfo.Add(new Keyword("On=@AfterClick\n", "", " Fires when the object has been single-clicked, just before the overhead name is shown.", "[ Mobiles ] [ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@Attack\n", "", " Fires when the Mobile begins attacking another.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@CallGuards\n", "", " Fires when the Mobile calls for guards.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@CharAttack\n", "", " Fires when the Mobile is attacked by another character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@CharClick\n", "", " Fires when the Mobile is clicked by another character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@CharClientTooltip\n", "", " Fires when the tooltips are about to be sent to the character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@CharDClick\n", "", " Fires when the Mobile double clicks another character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@CharTradeAccepted\n", "", " Fires when another Mobile accepts trade with the character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Click\n", "", " Fires when the object has been single-clicked.", "[ Mobiles ] [ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@ClientTooltip\n", "", " Fires when tooltips for this Mobile are about to be sent to a client.", "[ Mobiles ] [ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@ContextMenuRequest\n", "", " Fires when a client requests the context menu options for the object.", "[ Mobiles ] [ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@ContextMenuSelect\n", "", " Fires when a client selects a context menu option for the object.", "[ Mobiles ] [ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@Create\n", "", " Fires when the object is initially created, before it is placed in the world.", "[ Mobiles ] [ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@Criminal\n", "", " Fires when the Mobile becomes a criminal.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@DClick\n", "", " Fires when the object is double-clicked.", "[ Mobiles ] [ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@Death\n", "", " Fires when the character's hitpoints reaches zero.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@DeathCorpse\n", "", " Fires when a corpse is created for the character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Destroy\n", "", " Fires when the object is being deleted.", "[ Mobiles ] [ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@Dismount\n", "", " Fires when the Mobile dismounts their ride.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@EnvironChange\n", "", " Fires when the environment changes for the character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ExpChange\n", "", " Fires when the character's experience points change.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ExpLevelChange\n", "", " Fires when the character's experience level changes.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@FameChange\n", "", " Fires when the character's fame changes.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@GetHit\n", "", " Fires when the Mobile receives damage.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Hit\n", "", " Fires when the Mobile hits another in combat.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@HitMiss\n", "", " Fires when the Mobile fails to hit another in combat.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@HouseDesignCommit\n", "", " Fires when the Mobile commits a new house design.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@HouseDesignExit\n", "", " Fires when the Mobile exits house design mode.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Hunger\n", "", " Fires when the character's food level decreases.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemAfterClick\n", "", " Fires when the Mobile single-clicks an item, just before the overhead name is shown.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemBuy\n", "", " Fires when the Mobile buys an item from a vendor.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemClick\n", "", " Fires when the Mobile single-clicks an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemClientTooltip\n", "", " Fires when the tooltips are about to be sent to the client for an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemContextMenuRequest\n", "", " Fires when the Mobile requests the context menu options for an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemContextMenuSelect\n", "", " Fires when the Mobile selects a context menu option for an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemCreate\n", "", " Fires when an item is initially created, before it is placed in the world, and the Mobile is in some way responsible for it.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemDamage\n", "", " Fires when the Mobile damages an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemDClick\n", "", " Fires when the Mobile double-clicks an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemDropOn_Char\n", "", " Fires when the Mobile drops an item on to a character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemDropOn_Ground\n", "", " Fires when the Mobile drops an item on to the ground.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemDropOn_Item\n", "", " Fires when the Mobile drops an item on to another item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemDropOn_Self\n", "", " Fires when the Mobile drops an item inside another item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemEquip\n", "", " Fires when the Mobile equips an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemEquipTest\n", "", " Fires when the characer is about to equip an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemPickUp_Ground\n", "", " Fires when the Mobile picks an item up from the ground.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemPickUp_Pack\n", "", " Fires when the Mobile picks an item up from inside a container.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemPickUp_Self\n", "", " Fires when the Mobile picks an item up from inside another item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemPickUp_Stack\n", "", " Fires when the Mobile picks up an item from a stack.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemSell\n", "", " Fires when the Mobile sells an item to a vendor.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemSpellEffect\n", "", " Fires when the Mobile hits an item with a spell.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemStep\n", "", " Fires when the Mobile steps on an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemTargOn_Cancel\n", "", " Fires when the Mobile cancels an item's target cursor.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemTargOn_Char\n", "", " Fires when the Mobile targets a Mobile with an item's target cursor.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemTargOn_Ground\n", "", " Fires when the Mobile targets the ground with an item's target cursor.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemTargOn_Item\n", "", " Fires when the Mobile targets an item with an item's target cursor.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemToolTip\n", "", " Fires when the Mobile requests old-style tooltips for an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ItemUnEquip\n", "", " Fires when the Mobile unequips an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Jailed\n", "", " Fires when the Mobile is sent to jail.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@KarmaChange\n", "", " Fires when the character's karma changes.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Kill\n", "", " Fires when the Mobile kills another character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Login\n", "", " Fires when the Mobile logs in.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Logout\n", "", " Fires when the Mobile logs out.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Mount\n", "", " Fires when the Mobile mounts a ride.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@MurderDecay\n", "", " Fires when one of the character's kills is about to decay.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@MurderMark\n", "", " Fires when the Mobile is about to gain a kill.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCAcceptItem\n", "", " Fires when the NPC receives an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCActFight\n", "", " Fires when the NPC makes a combat decision.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCActFollow\n", "", " Fires when the NPC follows another character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCAction\n", "", " Fires when the NPC is about to perform an AI action.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCHearGreeting\n", "", " Fires when the NPC hears a Mobile for the first time.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCHearUnknown\n", "", " Fires when the NPC hears something they don't understand.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCLookAtChar\n", "", " Fires then the NPC looks at a character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCLookAtItem\n", "", " Fires when the NPC looks at an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCLostTeleport\n", "", " Fires when the NPC is lost and is about to be teleported back to their HOME.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCRefuseItem\n", "", " Fires when the NPC refuses an item being given to them.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCRestock\n", "", " Fires when the NPC is having their items restocked.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCSeeNewPlayer\n", "", " Fires when the NPC first sees a player.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCSeeWantItem\n", "", " Fires when the NPC sees an item they want.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@NPCSpecialAction\n", "", " Fires when the NPC is about to perform a special action (leaving fire trail, dropping web).", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@PersonalSpace\n", "", " Fires when the Mobile is stepped on.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@PetDesert\n", "", " Fires when the Mobile deserts its owner.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Profile\n", "", " Fires when a player attempts to read the character's profile from the paperdoll.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ReceiveItem\n", "", " Fires when the NPC receives an item from another character, before they decide if they want it or not.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@RegionEnter\n", "", " Fires when the Mobile enters a region.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@RegionLeave\n", "", " Fires when the Mobile leaves a region.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Rename\n", "", " Fires when the Mobile renames another.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SeeCrime\n", "", " Fires when the Mobile sees a crime take place.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SkillAbort\n", "", " Fires when the Mobile aborts a skill.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SkillChange\n", "", " Fires when the character's skill level changes.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SkillFail\n", "", " Fires when the Mobile fails a skill.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SkillGain\n", "", " Fires when the Mobile has a chance to gain in a skill.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SkillMakeItem\n", "", " Fires when the Mobile crafts an item.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SkillMenu\n", "", " Fires when a skill menu is shown to the character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SkillPreStart\n", "", " Fires when the Mobile starts a skill, before any hardcoded action takes place.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SkillSelect\n", "", " Fires when the Mobile selects a skill on their skill menu.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SkillStart\n", "", " Fires when the Mobile starts a skill.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SkillSuccess\n", "", " Fires when the Mobile succeeds at a skill.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SkillUseQuick\n", "", " Fires when the Mobile quickly uses a skill.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SpellBook\n", "", " Fires when the Mobile opens their spellbook.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SpellCast\n", "", " Fires when the Mobile casts a spell.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SpellEffect\n", "", " Fires when the Mobile is hit by the effects of a spell.", "[ Mobiles ] [ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@SpellFail\n", "", " Fires when the Mobile fails to cast a spell.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SpellSelect\n", "", " Fires when the Mobile selects a spell to cast.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@SpellSuccess\n", "", " Fires when the Mobile successfully casts a spell.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@StatChange\n", "", " Fires when the character's STR, DEX or INT is changed through skill gain.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@StepStealth\n", "", " Fires when the Mobile takes a step whilst hidden.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@ToolTip\n", "", " Fires when a player requests old-style tooltips for this character.", "[ Mobiles ] [ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@TradeAccepted\n", "", " Fires when the Mobile accepts a trade with another player.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserBugReport\n", "", " Fires when the player submits a bug report.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserChatButton\n", "", " Fires when the player presses the Chat button on the paperdoll.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserExtCmd\n", "", " Fires when the player sends an extended command packet. (used by some macros)", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserExWalkLimit\n", "", " Fires when the player's movement is restricted by the movement speed settings in Sphere.ini", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserGuildButton\n", "", " Fires when the player presses the Guild button on the paperdoll.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserKRToolbar\n", "", " Fires when the player presses a button on the toolbar.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserMailBag\n", "", " Fires when the player drags the mail bag on to another character.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserQuestArrowClick\n", "", " Fires when the player clicks the quest arrow.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserQuestButton\n", "", " Fires when the player presses the Quest button on the paperdoll.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserSkills\n", "", " Fires when the player opens their skill menu, or a skill update is sent to the player.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserSpecialMove\n", "", " Fires when the player uses a special move.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserStats\n", "", " Fires when the player opens the status window.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserVirtue\n", "", " Fires when the player presses on the Virtue button.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserVirtueInvoke\n", "", " Fires when the player invokes a virtue through macros.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@UserWarmode\n", "", " Fires when the player switches between war and peace mode.", "[ Mobiles ]"));
            keywordsInfo.Add(new Keyword("On=@Buy\n", "", " Fires when the item is being bought from a vendor.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@Damage\n", "", " Fires when the item receives damage.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@DropOn_Char\n", "", " Fires when the item has been dropped on to a character.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@DropOn_Ground\n", "", " Fires when the item has been dropped on to the ground.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@DropOn_Item\n", "", " Fires when the item is dropped on to another item.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@DropOn_Self\n", "", " Fires when an item has been dropped on to this item.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@Equip\n", "", " Fires when the item has been equipped.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@EquipTest\n", "", " Fires when the item is about to be equipped.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@PickUp_Ground\n", "", " Fires when the item ihas been picked up from the ground.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@PickUp_Pack\n", "", " Fires when the item is picked up from inside a container.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@PickUp_Self\n", "", " Fires when an item has been picked up from inside the item.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@PickUp_Stack\n", "", " Fires when the item is picked up from a stack.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@Sell\n", "", " Fires when the item is sold to a vendor.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@Step\n", "", " Fires when a Mobile steps on the item.", "[ ITEM ] [ Regions ]"));
            keywordsInfo.Add(new Keyword("On=@TargOn_Cancel\n", "", " Fires when a target is cancelled from the item.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@TargOn_Char\n", "", " Fires when a Mobile is targeted from the item.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@TargOn_Ground\n", "", " Fires when the ground is targeted from the item.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@TargOn_Item\n", "", " Fires when an item is targeted from this item.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@Timer\n", "", " Fires when the item's timer expires.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@UnEquip\n", "", " Fires when the item is unequipped.", "[ ITEM ]"));
            keywordsInfo.Add(new Keyword("On=@ResourceTest\n", "", " Fires when the resource is being considered for spawning.", "[ Region Resources ]"));
            keywordsInfo.Add(new Keyword("On=@ResourceFound\n", "", " Fires when the resource is spawned.", "[ Region Resources ]"));
            keywordsInfo.Add(new Keyword("On=@CliPeriodic\n", "", " Fires multiple times approximately every 30 seconds, for each client in the region.", "[ Regions ]"));
            keywordsInfo.Add(new Keyword("On=@Enter\n", "", " Fires when a Mobile enters the region.", "[ Regions ]"));
            keywordsInfo.Add(new Keyword("On=@Exit\n", "", " Fires when a Mobile exits the region.", "[ Regions ]"));
            keywordsInfo.Add(new Keyword("On=@RegPeriodic\n", "", " Fires once approximately every 30 seconds, as long as there is at least one client in the region.", "[ Regions ]"));
            keywordsInfo.Add(new Keyword("On=@Abort\n", "", " Fires when a Mobile aborts an attempt at using the skill.", "[ Skills ]"));
            keywordsInfo.Add(new Keyword("On=@Fail\n", "", " Fires when a Mobile fails an attempt at using the skill.", "[ Skills ] [ Spells ]"));
            keywordsInfo.Add(new Keyword("On=@Gain\n", "", " Fires when a Mobile is given the chance to gain in the skill.", "[ Skills ]"));
            keywordsInfo.Add(new Keyword("On=@PreStart\n", "", " Fires when a Mobile starts to use the skill, before any hardcoded behaviour takes place.", "[ Skills ]"));
            keywordsInfo.Add(new Keyword("On=@Select\n", "", " Fires when a Mobile selects the skill from their skill menu.", "[ Skills ] [ Spells ]"));
            keywordsInfo.Add(new Keyword("On=@Start\n", "", " Fires when a Mobile starts to use the skill.", "[ Skills ] [ Spells ]"));
            keywordsInfo.Add(new Keyword("On=@Success\n", "", " Fires when a Mobile succeeds an attempt at using the skill.", "[ Skills ] [ Spells ]"));
            keywordsInfo.Add(new Keyword("On=@UseQuick\n", "", " Fires when a Mobile quickly uses the skill, without changing their ACTION.", "[ Skills ]"));
            keywordsInfo.Add(new Keyword("On=@Effect\n", "", " Fires when a Mobile or item is hit by the spell.", "[ Spells ]"));
        }

        #endregion TRIGGERS
    }
}